২. ক্লাস এবং কনস্ট্যান্ট (Class and Constants)
class CountryRepository {
  static const String _baseUrl = 'https://countrylist.teamrabbil.com/api';
  static const String _countryListEndpoint = '/country-list';
•CountryRepository ক্লাস: এই ক্লাসটি দেশের ডেটা সোর্সের সাথে যোগাযোগের সমস্ত লজিককে একটি জায়গায় আবদ্ধ (encapsulate) করে।
•_baseUrl: এটি একটি কনস্ট্যান্ট (অপরিবর্তনীয়) String, যা API-এর মূল URL ধারণ করে।
•_countryListEndpoint: এটি দেশের তালিকা পাওয়ার জন্য নির্দিষ্ট API এন্ডপয়েন্টের (endpoint) String। URL-এর অংশগুলোকে এভাবে কনস্ট্যান্ট হিসেবে রাখলে কোডটি পরিষ্কার থাকে এবং ভবিষ্যতে পরিবর্তন করা সহজ হয়।

৩. getCountries মেথড
  Future<List<Country>> getCountries() async {
    // ... মেথডের বাকি অংশ
  }
 •এটি getCountries নামে একটি অ্যাসিঙ্ক্রোনাস (asynchronous) মেথড।
 •async কিওয়ার্ডটি নির্দেশ করে যে এই মেথডটি অ্যাসিঙ্ক্রোনাস অপারেশন সম্পাদন করবে এবং মূল এক্সিকিউশন থ্রেডকে ব্লক করবে না।
 •এটি একটি Future<List<Country>> রিটার্ন করে। Future এমন একটি অবজেক্ট যা বোঝায় যে এর মান ভবিষ্যতে পাওয়া যাবে। এক্ষেত্রে, এটি ভবিষ্যতে Country অবজেক্টের একটি তালিকা (List) প্রদান করবে।

 ৪. HTTP রিকোয়েস্ট পাঠানো
     try {
       final response = await http.get(
         Uri.parse('$_baseUrl$_countryListEndpoint'),
         headers: {'Content-Type': 'application/json'},
       );
 •try-catch ব্লক: পুরো অপারেশনটি একটি try-catch ব্লকের মধ্যে রাখা হয়েছে যাতে শক্তিশালী এরর হ্যান্ডলিং (error handling) নিশ্চিত করা যায়। এর ফলে নেটওয়ার্ক রিকোয়েস্ট বা ডেটা পার্সিংয়ের সময় কোনো সমস্যা হলে অ্যাপটি ক্র্যাশ করবে না এবং এররটি সুন্দরভাবে পরিচালনা করা যাবে।
 •http.get(): http প্যাকেজের এই ফাংশনটি নির্দিষ্ট URL-এ একটি HTTP GET রিকোয়েস্ট পাঠায়।
 •await: await কিওয়ার্ডটি getCountries মেথডের এক্সিকিউশনকে 잠시 থামিয়ে রাখে যতক্ষণ না http.get() রিকোয়েস্টটি সম্পন্ন হয় এবং একটি রেসপন্স (response) ফিরে আসে।
 •Uri.parse(...): এটি _baseUrl এবং _countryListEndpoint-কে একত্রিত করে একটি সম্পূর্ণ URL স্ট্রিং তৈরি করে এবং তারপর সেটিকে একটি Uri অবজেক্টে পার্স করে, যা http.get() মেথডের জন্য প্রয়োজনীয়।
 •headers: এটি একটি ঐচ্ছিক প্যারামিটার যা রিকোয়েস্টের জন্য HTTP হেডার নির্দিষ্ট করে। এখানে, 'Content-Type': 'application/json' সার্ভারকে জানায় যে ক্লায়েন্ট একটি JSON রেসপন্স হ্যান্ডেল করতে পারে।

 ৫. রেসপন্স হ্যান্ডেল করা
 •response.statusCode == 200: এটি পরীক্ষা করে দেখে যে রিকোয়েস্টটি সফল হয়েছে কিনা। স্ট্যাটাস কোড 200-এর অর্থ হলো "OK"।•json.decode(response.body): রিকোয়েস্ট সফল হলে, response.body-তে থাকা JSON স্ট্রিংটিকে json.decode() ব্যবহার করে Dart অবজেক্টে পার্স করা হয়। API একটি JSON অ্যারে (array) রিটার্ন করায়, ফলাফলটি হয় List<dynamic>।•jsonData.map(...): map ফাংশনটি jsonData তালিকার প্রতিটি আইটেমের উপর দিয়ে চলে (iterate)।•Country.fromJson(json): প্রতিটি আইটেমের জন্য (যা একটি দেশের ডেটা ধারণকারী একটি Map<String, dynamic>), এটি Country.fromJson() ফ্যাক্টরি কনস্ট্রাক্টরকে কল করে। এই কনস্ট্রাক্টরটি ম্যাপ থেকে একটি Country অবজেক্ট তৈরি করার দায়িত্ব পালন করে।•.toList(): এটি map থেকে প্রাপ্ত Iterable-কে একটি List<Country>-তে রূপান্তরিত করে।•else ব্লক: যদি স্ট্যাটাস কোড 200 না হয়, তার মানে সার্ভার সাইডে কোনো সমস্যা হয়েছে। এক্ষেত্রে, একটি Exception থ্রো করা হয়, যেখানে ব্যর্থতার কারণ এবং স্ট্যাটাস কোড উল্লেখ থাকে।
 ৬. এরর হ্যান্ডলিং
     } catch (e) {
       throw Exception('Failed to load countries: $e');
     }


     •এই catch ব্লকটি try ব্লকের মধ্যে হওয়া যেকোনো এরর (যেমন নেটওয়ার্ক সংযোগ বিচ্ছিন্ন, টাইমআউট, বা পার্সিং এরর) ধরবে।•এরপর এটি মূল এররটিকে (e) মুড়িয়ে একটি নতুন, সাধারণ Exception থ্রো করে, যা থেকে বোঝা যায় যে দেশ লোড করার অপারেশনটি ব্যর্থ হয়েছে। এর ফলে, যেখান থেকে এই মেথডটি কল করা হয়েছে, সেখানে এই ব্যর্থতাটি হ্যান্ডেল করা সম্ভব হয়।