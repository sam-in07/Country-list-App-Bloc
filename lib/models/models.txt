১. import 'package:equatable/equatable.dart';•
এই লাইনটি equatable প্যাকেজটিকে ইম্পোর্ট (import) করে।
এই প্যাকেজটি অবজেক্টের মান-ভিত্তিক সমতা (value equality)
বাস্তবায়নে সাহায্য করে। অর্থাৎ, দুটি অবজেক্ট একই মেমরি লোকেশনে আছে কিনা,
তা পরীক্ষা না করে তাদের প্রোপার্টির মানগুলো এক কিনা, তা পরীক্ষা করে।

২. class Country extends Equatable { ... }•
এটি Country নামে একটি ক্লাস ঘোষণা করে।•extends Equatable এর মানে হলো
Country ক্লাসটি Equatable ক্লাসের বৈশিষ্ট্যগুলো পাবে। ফলে, Country
 ক্লাসের ইনস্ট্যান্সগুলোর সমতা পরীক্ষা (==) এবং হ্যাশ কোড (hash code) তৈরি করার জন্য
 equatable প্যাকেজের যুক্তি (logic) ব্যবহৃত হবে।

৩. final int id; final String name; final String capital; final String shortDescription;
final String flag;•এই লাইনগুলো Country ক্লাসের প্রোপার্টি (property)
বা ফিল্ড (field) ঘোষণা করে।•final কিওয়ার্ডটি নির্দেশ করে যে এই প্রোপার্টিগুলো
অপরিবর্তনীয় (immutable)। অর্থাৎ, অবজেক্ট তৈরি করার সময় এদের মান নির্ধারণ করা হয়
এবং পরে আর পরিবর্তন করা যায় না।•প্রোপার্টিগুলো হলো:
•id: দেশের জন্য একটি পূর্ণসংখ্যার (integer) শনাক্তকারী (identifier)।
•name: দেশের নাম (string)।•capital: দেশের রাজধানীর নাম (string)।
•shortDescription: দেশ সম্পর্কে একটি সংক্ষিপ্ত বিবরণ (string)।
•flag: দেশের পতাকার ছবির URL বা ফাইলের পাথ (string)।


৪. const Country({ ... });
•এটি Country ক্লাসের কনস্ট্রাক্টর (constructor)।
•const নির্দেশ করে যে, যদি আপনি একই প্রোপার্টির মান দিয়ে একাধিক Country অবজেক্ট তৈরি করেন, তাহলে সেগুলো মেমরিতে একই ইনস্ট্যান্স হবে (canonicalized)। এটি সম্ভব কারণ ক্লাসের সব ফিল্ড final।
•এটি নেইমড প্যারামিটার (named parameters) ব্যবহার করে (যেমন: required this.id)।
•required এর মানে হলো Country অবজেক্ট তৈরি করার সময় এই প্যারামিটারগুলোর মান অবশ্যই দিতে হবে।
•this.id = id; (এবং অন্যান্য প্যারামিটারের জন্যেও একই) কনস্ট্রাক্টরে পাস করা মানগুলোকে ইনস্ট্যান্সের প্রোপার্টিতে অ্যাসাইন (assign) করে।


৫. factory Country.fromJson(Map<String, dynamic> json) { ... }
•এটি fromJson নামে একটি ফ্যাক্টরি কনস্ট্রাক্টর (factory constructor)।
•ফ্যাক্টরি কনস্ট্রাক্টর ব্যবহার করা হয় যখন আপনি প্রতিবার ক্লাসের নতুন ইনস্ট্যান্স তৈরি করতে চান না।
 এটি একটি বিদ্যমান ইনস্ট্যান্স বা সাব-টাইপের (subtype) ইনস্ট্যান্স রিটার্ন করতে পারে।
 •এখানে, fromJson একটি JSON-এর মতো ম্যাপ (Map<String, dynamic>) থেকে Country অবজেক্ট তৈরি করার জন্য ডিজাইন করা হয়েছে।•এটি আশা করে যে ইনপুট json ম্যাপটিতে 'id', 'name', 'capital', 'short_description', এবং 'flag' এর মতো কী (key) থাকবে।
 •এটি ম্যাপ থেকে মানগুলো বের করে, সেগুলোকে তাদের প্রত্যাশিত টাইপে (যেমন: json['id'] as int) রূপান্তর করে এবং তারপর একটি নতুন Country অবজেক্ট তৈরি করে রিটার্ন করে। এটি JSON ডেটা ডিসিরিয়ালাইজ (deserialize) করার একটি সাধারণ প্যাটার্ন।

৬. Map<String, dynamic> toJson() { ... }
•এটি toJson নামে একটি মেথড।
•এটি একটি Country অবজেক্টকে আবার JSON-এর মতো ম্যাপে (Map<String, dynamic>) রূপান্তর করে।
•এটি fromJson-এর বিপরীত এবং সাধারণত অবজেক্টকে JSON ফরম্যাটে সিরিয়ালাইজ (serialize) করার জন্য ব্যবহৃত হয়।
•এটি একটি ম্যাপ তৈরি করে যেখানে কীগুলো হলো প্রোপার্টির নাম (যেমন: 'id', 'name') এবং মানগুলো হলো Country ইনস্ট্যান্সের সংশ্লিষ্ট প্রোপার্টির মান।


৭. @override List<Object?> get props => [id, name, capital, shortDescription, flag];
•এটি equatable প্যাকেজের জন্য অত্যন্ত গুরুত্বপূর্ণ।
•এটি Equatable ক্লাস থেকে props নামক getter-টিকে ওভাররাইড (override) করে।
•এখানে আপনি সেই সব প্রোপার্টি তালিকাভুক্ত করবেন যেগুলোকে দুটি Country অবজেক্ট সমান কিনা তা নির্ধারণ করার সময় বিবেচনা করা উচিত।
•যদি দুটি Country অবজেক্টের id, name, capital, shortDescription, এবং flag-এর মান একই হয়, তাহলে equatable প্যাকেজ তাদের সমান বলে গণ্য করবে।

৯. @override String toString() { ... }
•এটি ডিফল্ট toString() মেথডটিকে ওভাররাইড করে।
•আপনি যখন একটি Country অবজেক্ট প্রিন্ট (print) করতে বা স্ট্রিং-এ রূপান্তর করতে চেষ্টা করেন, তখন এটি আরও সহজে পাঠযোগ্য (human-readable) স্ট্রিং রিপ্রেজেন্টেশন (string representation) প্রদান করে।
•এতে সব প্রোপার্টির নাম এবং মান অন্তর্ভুক্ত থাকে।


সংক্ষেপে:
Country ক্লাসটি একটি দেশের তথ্য সংরক্ষণ করার জন্য ডিজাইন করা একটি ডেটা মডেল ক্লাস।
এর প্রধান বৈশিষ্ট্যগুলো হলো:•অপরিবর্তনীয়তা (Immutability): এর প্রোপার্টিগুলো final।
•মান-ভিত্তিক সমতা (Value Equality): এটি প্রোপার্টির মানের উপর ভিত্তি করে সঠিক সমতা পরীক্ষার জন্য equatable প্যাকেজ ব্যবহার করে।
•JSON সিরিয়ালাইজেশন/ডিসিরিয়ালাইজেশন (JSON Serialization/Deserialization): এটি JSON-এর মতো ডেটা স্ট্রাকচারে সহজে রূপান্তরের জন্য fromJson এবং toJson মেথড সরবরাহ করে।
•স্পষ্ট স্ট্রিং রিপ্রেজেন্টেশন: ডিবাগিং এবং লগিং-এর সুবিধার জন্য এটির একটি কাস্টম toString() মেথড রয়েছে।